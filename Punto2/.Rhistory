```{python}
import numpy
```{r}
```{r}
summary(cars)
```
```{r, echo=FALSE}
plot(cars)
```
```{r}
Purinas<-function(x) {
Purinas <- 0 # asignar 0 a Purinas
for (n in x) {
if (n == "A") Purinas <- Purinas + 1 # contar las purinas
if (n == "G") Purinas <- Purinas + 1 # contar las purinas
}
return((Purinas/(length(x)))*100)
}
Pirimidinas<-function(x) {
Pirimidinas <- 0 # asignar el valor de 100 a Pirimidinas
{
Pirimidinas <- 100-Purinas(x)
}
return(Pirimidinas)
}
```
MonteCarloInt<-function(func,lim1,lim2) {
#Definir la función y sus valores
x = linspace(lim1,lim2,100000)
fun = func(x)
min_y = -amin(fun)
max_y = amax(fun)
#General puntos aleatorios
n_random = 100000
random_x = random.rand(n_random) * (lim2 - lim1) + lim1
random_y = random.rand(n_random) * (max_y - min_y) + min_y
delta = func(random_x) - random_y
below  = where(delta>0.0)
plot(x,fun, c='r')
show()
scatter(random_x[below], random_y[below], alpha=0.3)
show()
#and this is the final result. The integral can be calculated as a fraction of the points below the curve.
interval_integral = (max_y-min_y) * (lim2 - lim1)
integral  = interval_integral * (size(below)/(1.0*size(random_y)))
#how many points are 'below'?
return 'inside:', size(below), 'total:', size(random_y), '\nValue: ', integral
```{r}
MonteCarloInt<-function(func,lim1,lim2) {
#Definir la función y sus valores
x = linspace(lim1,lim2,100000)
fun = func(x)
min_y = -amin(fun)
max_y = amax(fun)
#General puntos aleatorios
n_random = 100000
random_x = random.rand(n_random) * (lim2 - lim1) + lim1
random_y = random.rand(n_random) * (max_y - min_y) + min_y
delta = func(random_x) - random_y
below  = where(delta>0.0)
plot(x,fun, c='r')
show()
scatter(random_x[below], random_y[below], alpha=0.3)
show()
#and this is the final result. The integral can be calculated as a fraction of the points        below the curve.
interval_integral = (max_y-min_y) * (lim2 - lim1)
integral  = interval_integral * (size(below)/(1.0*size(random_y)))
#how many points are 'below'?
print 'inside:', size(below), 'total:', size(random_y), '\nValue: ', integral
MonteCarloInt<-function(func,lim1,lim2) {
#Definir la función y sus valores
x = linspace(lim1,lim2,100000)
fun = func(x)
min_y = -amin(fun)
max_y = amax(fun)
#General puntos aleatorios
n_random = 100000
random_x = random.rand(n_random) * (lim2 - lim1) + lim1
random_y = random.rand(n_random) * (max_y - min_y) + min_y
delta = func(random_x) - random_y
below  = where(delta>0.0)
plot(x,fun, c='r')
show()
scatter(random_x[below], random_y[below], alpha=0.3)
show()
#and this is the final result. The integral can be calculated as a fraction of the points        below the curve.
interval_integral = (max_y-min_y) * (lim2 - lim1)
integral  = interval_integral * (size(below)/(1.0*size(random_y)))
#how many points are 'below'?
return size(below), size(random_y), integral
library("ggplot2", lib.loc="~/R/i686-pc-linux-gnu-library/3.1")
library("rstudio", lib.loc="~/R/i686-pc-linux-gnu-library/3.1")
x = linspace(-3.0,3.0,1000)
x = linspace(-3.0,3.0,1000)
library("manipulate", lib.loc="~/R/i686-pc-linux-gnu-library/3.1")
x = linspace(-3.0,3.0,1000)
install.packages(c("colorspace", "formatR", "ggplot2", "highr", "jsonlite", "manipulate", "mime", "Rcpp", "rstudioapi", "zoo"))
library("RCurl", lib.loc="/usr/lib/R/site-library")
x = linspace(-3.0,3.0,1000)
x = linspace(-3.0,3.0,1000)
chippy <- function(x) sin(cos(x)*exp(-x/2))
curve(chippy, -8, 7, n = 2001)
g <- function(x) sin(cos(x)*exp(-x/2))
curve(g, -8, 7, n = 2001)
h <- function(x) (cos(50*x)+sin(20*x))^2
curve(h, -8, 7, n = 10000)
curve(h, 0, 1, n = 10000)
amax(h)
len(h)
lenght(h)
length(h)
g <- curve(h, 0, 1, n = 10000)
length(g)
mean(h)
mean(g)
max_x = 5.0
min_x =0.0
rand_x <- runif(1000, 0, 1) * (max_x-min_x) + min_x
max_y = 5.0
min_y=0.0
rand_x <- runif(1000, 0, 1) * (max_x-min_x) + min_x
rand_y <- runif(1000, 0, 1) * (max_y-min_y) + min_y
scatter(random_x, random_y)
scatterplot(random_x, random_y)
plot(random_x, random_y)
plot(rand_x, rand_y)
max_x = 1.0
min_x =0.0
max_y = 5.0
min_y=0.0
rand_x <- runif(1000, 0, 1) * (max_x-min_x) + min_x
rand_y <- runif(1000, 0, 1) * (max_y-min_y) + min_y
plot(rand_x, rand_y)
delta <- h(rand_x) - rand_y
below  = where(delta>0.0)
scatter(rand_x[below], rand_y[below])
plot(rand_x[below], rand_y[below])
below <- where(delta>0.0)
plot(rand_x[below], rand_y[below])
max_y = which.min(h)
if{delta>0.0)}:
if delta>0.0:
if {delta>0.0}:
if (delta>0.0):
if(delta>0.0)
below <- delta
if(delta>0.0){
below <- delta}
if(delta>0.0)  below <- delta
for n in delta
for n in delta if(n>0.0)  below <- n
for n in delta{
for(n in delta){
if(n>0.0)  below <- n}
plot(rand_x[below], rand_y[below])
for(n in delta){
if(n>0.0)  below <- c(below,n)}
plot(rand_x[below], rand_y[below])
h <- function(x) (cos(50*x)+sin(20*x))^2
g <- curve(h, 0, 1, n = 10000)
max_x = 1.0
min_x =0.0
max_y = 5.0
min_y=0.0
rand_x <- runif(1000, 0, 1) * (max_x-min_x) + min_x
rand_y <- runif(1000, 0, 1) * (max_y-min_y) + min_y
plot(rand_x, rand_y)
delta <- h(rand_x) - rand_y
for(n in delta){
if(n>0.0)  below <- c(below,n)}
plot(rand_x[below], rand_y[below])
rand_x <- runif(10000, 0, 1) * (max_x-min_x) + min_x
rand_y <- runif(10000, 0, 1) * (max_y-min_y) + min_y
plot(rand_x, rand_y)
delta <- h(rand_x) - rand_y
for(n in delta){
if(n>0.0)  below <- c(below,n)}
plot(rand_x[below], rand_y[below])
for(n in delta){if(n>0.0)  below <- c(below,n)}
plot(rand_x[below], rand_y[below])
plot(rand_x, rand_y)
delta <- h(rand_x) - rand_y
for(n in delta){if(n>0.0)  below <- c(below,n)}
plot(rand_x[below], rand_y[below])
for(n in delta){i = 0; i= i+1; if(n>0.0) below <- c(below,i)}
plot(rand_x[below], rand_y[below])
rand_x <- runif(10000, 0, 1) * (max_x-min_x) + min_x
rand_y <- runif(10000, 0, 1) * (max_y-min_y) + min_y
plot(rand_x, rand_y)
delta <- h(rand_x) - rand_y
for(n in delta){i = 0; i= i+1; if(n>0.0) below <- c(below,i)}
plot(rand_x[below], rand_y[below])
h <- function(x) (cos(50*x)+sin(20*x))^2
g <- curve(h, 0, 1, n = 10000)
max_x = 1.0
min_x =0.0
max_y = 5.0
min_y=0.0
rand_x <- runif(10000, 0, 1) * (max_x-min_x) + min_x
rand_y <- runif(10000, 0, 1) * (max_y-min_y) + min_y
plot(rand_x, rand_y)
delta <- h(rand_x) - rand_y
for(n in delta){i = 0; i= i+1; if(n>0.0) below <- c(below,i)}
delta <- h(rand_x) - rand_y
for(n in delta){i = 0; i= i+1; if(n>0.0) below <- c(below,i)}
for(n in delta){i = 0; i= i+1; below <- c(NA) if(n>0.0) below <- c(below,i)}
for(n in delta){i = 0; i= i+1; below <- c(NA); if(n>0.0) below <- c(below,i)}
h <- function(x) (cos(50*x)+sin(20*x))^2
g <- curve(h, 0, 1, n = 10000)
max_x = 1.0
min_x =0.0
max_y = 5.0
min_y=0.0
rand_x <- runif(10000, 0, 1) * (max_x-min_x) + min_x
rand_y <- runif(10000, 0, 1) * (max_y-min_y) + min_y
plot(rand_x, rand_y)
delta <- h(rand_x) - rand_y
for(n in delta){i = 0; i= i+1; below <- c(NA); if(n>0.0) below <- c(below,i)}
plot(rand_x[below], rand_y[below])
for(n in delta){i = 0; i= i+1; below <- c(0); if(n>0.0) below <- c(below,i)}
for(n in delta){i = 0; i= i+1; below <- c(0); if(n>0.0){below <- c(below,i)}}
for(n in delta){i = 0; i= i+1; below <- c(NA); if(n>0.0){below <- c(below,i)}}
i = 0
below <- (NA)
for(n in delta){i = i+1 if(n>0.0){below <- c(below,i)}}
for(n in delta){i = i+1
if(n>0.0){below <- c(below,i)}}
plot(rand_x[below], rand_y[below])
interval_integral = (max_y-min_y) * (max_x - min_x)
integral  = interval_integral * (length(below)/(1.0*length(random_y)))
integral  = interval_integral * (length(below)/(1.0*length(rand_y)))
print integral
integral
max_y = max(h)
max_y = max(h(0,1,2))
max_y = max(h(c(0,1,2))
min_y=0.0
h <- function(x) (cos(50*x)+sin(20*x))^2
g <- curve(h, 0, 1, n = 10000)
max_x = 1.0
min_x =0.0
max_y = max(h(c(0,1,2))
min_y=0.0
rand_x <- runif(10000, 0, 1) * (max_x-min_x) + min_x
rand_y <- runif(10000, 0, 1) * (max_y-min_y) + min_y
plot(rand_x, rand_y)
delta <- h(rand_x) - rand_y
i = 0
below <- (NA)
for(n in delta){i = i+1
if(n>0.0){below <- c(below,i)}}
plot(rand_x[below], rand_y[below])
interval_integral = (max_y-min_y) * (max_x - min_x)
integral  = interval_integral * (length(below)/(1.0*length(rand_y)))
integral
h <- function(x) (cos(50*x)+sin(20*x))^2
g <- curve(h, 0, 1, n = 10000)
max_x = 1.0
min_x =0.0
max_y = max(h(c(0,1,2))
min_y=0.0
rand_x <- runif(10000, 0, 1) * (max_x-min_x) + min_x
rand_y <- runif(10000, 0, 1) * (max_y-min_y) + min_y
h <- function(x) (cos(50*x)+sin(20*x))^2
g <- curve(h, 0, 1, n = 10000)
max_x = 1.0
min_x =0.0
max_y = 5.0
min_y=0.0
rand_x <- runif(10000, 0, 1) * (max_x-min_x) + min_x
rand_y <- runif(10000, 0, 1) * (max_y-min_y) + min_y
plot(rand_x, rand_y)
delta <- h(rand_x) - rand_y
i = 0
below <- (NA)
for(n in delta){i = i+1
if(n>0.0){below <- c(below,i)}}
plot(rand_x[below], rand_y[below])
interval_integral = (max_y-min_y) * (max_x - min_x)
integral  = interval_integral * (length(below)/(1.0*length(rand_y)))
integral
h <- function(x) (cos(50*x)+sin(20*x))^2
g <- curve(h, 0, 1, n = 10000)
max_x = 1.0
min_x =0.0
max_y = 5.0
min_y=0.0
rand_x <- runif(10000, 0, 1) * (max_x-min_x) + min_x
rand_y <- runif(10000, 0, 1) * (max_y-min_y) + min_y
plot(rand_x, rand_y)
delta <- h(rand_x) - rand_y
i = 0
below <- (NA)
for(n in delta){i = i+1
if(n>0.0){below <- c(below,i)}}
plot(rand_x[below], rand_y[below])
interval_integral = (max_y-min_y) * (max_x - min_x)
integral  = interval_integral * (length(below)/(1.0*length(rand_y)))
integral
h <- function(x) (cos(50*x)+sin(20*x))^2
MonteCarloInt <- function(func,lim1,lim2){
g <- curve(func, lim1, lim2, n = 10000)
max_y = 5.0
min_y=0.0
rand_x <- runif(10000, 0, 1) * (lim2-lim1) + lim1
rand_y <- runif(10000, 0, 1) * (max_y-min_y) + min_y
plot(rand_x, rand_y)
delta <- h(rand_x) - rand_y
i = 0
below <- (NULL)
for(n in delta){i = i+1
if(n>0.0){below <- c(below,i)}}
plot(rand_x[below], rand_y[below])
interval_integral = (max_y-min_y) * (max_x - min_x)
integral  = interval_integral * (length(below)/(1.0*length(rand_y)))
integral
}
MonteCarloInt(h,0.0,1.0)
MonteCarloInt(h,0.0,1.0)
h <- function(x) (cos(50*x)+sin(20*x))^2
MonteCarloInt <- function(func,lim1,lim2){
g <- curve(func, lim1, lim2, n = 10000)
max_y = 5.0
min_y=0.0
rand_x <- runif(10000, 0, 1) * (lim2-lim1) + lim1
rand_y <- runif(10000, 0, 1) * (max_y-min_y) + min_y
plot(rand_x, rand_y)
delta <- h(rand_x) - rand_y
i = 0
below <- (NULL)
for(n in delta){i = i+1
if(n>0.0){below <- c(below,i)}}
plot(rand_x[below], rand_y[below])
interval_integral = (max_y-min_y) * (lim2 - lim2)
integral  = interval_integral * (length(below)/(1.0*length(rand_y)))
integral
}
MonteCarloInt(h,0.0,1.0)
h <- function(x) (cos(50*x)+sin(20*x))^2
MonteCarloInt <- function(func,lim1,lim2){
g <- curve(func, lim1, lim2, n = 10000)
max_y = 5.0
min_y=0.0
rand_x <- runif(10000, 0, 1) * (lim2-lim1) + lim1
rand_y <- runif(10000, 0, 1) * (max_y-min_y) + min_y
plot(rand_x, rand_y)
delta <- h(rand_x) - rand_y
i = 0
below <- (NULL)
for(n in delta){i = i+1
if(n>0.0){below <- c(below,i)}}
plot(rand_x[below], rand_y[below])
interval_integral = (max_y-min_y) * (lim2 - lim2)
integral  = interval_integral * (length(below)/(1.0*length(rand_y)))
integral
}
quit()
