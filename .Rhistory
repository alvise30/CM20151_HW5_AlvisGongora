h <- function(x) (cos(50*x)+sin(20*x))^2
MonteCarloInt <- function(func,lim1,lim2){
g <- curve(func, lim1, lim2, n = 10000)
max_y = 5.0
min_y=0.0
rand_x <- runif(10000, 0, 1) * (lim2-lim1) + lim1
rand_y <- runif(10000, 0, 1) * (max_y-min_y) + min_y
plot(rand_x, rand_y)
delta <- h(rand_x) - rand_y
i = 0
below <- (NULL)
for(n in delta){i = i+1
if(n>0.0){below <- c(below,i)}}
plot(rand_x[below], rand_y[below])
interval_integral = (max_y-min_y) * (lim2 - lim2)
integral  = interval_integral * (length(below)/(1.0*length(rand_y)))
integral
}
MonteCarloInt(h,0.0,1.0)
h <- function(x) (cos(50*x)+sin(20*x))^2
MonteCarloInt <- function(func,lim1,lim2){
g <- curve(func, lim1, lim2, n = 10000)
max_y = 5.0
min_y=0.0
rand_x <- runif(10000, 0, 1) * (lim2-lim1) + lim1
rand_y <- runif(10000, 0, 1) * (max_y-min_y) + min_y
plot(rand_x, rand_y)
delta <- h(rand_x) - rand_y
i = 0
below <- (NULL)
for(n in delta){i = i+1
if(n>0.0){below <- c(below,i)}}
plot(rand_x[below], rand_y[below])
interval_integral = (max_y-min_y) * (lim2 - lim1)
integral  = interval_integral * (length(below)/(1.0*length(rand_y)))
integral
}
MonteCarloInt(h,0.0,1.0)
p <- funtion(x) (1/(pi*(1+y^2)))
p <- function(x) (1/(pi*(1+y^2)))
MonteCarloInt(p,2.0,inf)
MonteCarloInt(p,2.0,Inf)
MonteCarloInt(p,2.0,50)
h <- function(x) (cos(50*x)+sin(20*x))^2
p <- function(x) (1/(pi*(1+y^2)))
MonteCarloInt <- function(func,lim1,lim2){
g <- curve(func, lim1, lim2, n = 10000)
max_y = 100.0
min_y=0.0
rand_x <- runif(10000, 0, 1) * (lim2-lim1) + lim1
rand_y <- runif(10000, 0, 1) * (max_y-min_y) + min_y
plot(rand_x, rand_y)
delta <- h(rand_x) - rand_y
i = 0
below <- (NULL)
for(n in delta){i = i+1
if(n>0.0){below <- c(below,i)}}
plot(rand_x[below], rand_y[below])
interval_integral = (max_y-min_y) * (lim2 - lim1)
integral  = interval_integral * (length(below)/(1.0*length(rand_y)))
integral
}
MonteCarloInt(p,2.0,50)
MonteCarloInt(p,2.0,50.0)
MonteCarloInt(p,2.0,50.0)
p <- function(x) (1/(pi*(1+x^2)))
MonteCarloInt(p,2.0,50.0)
max_y = 10.0
MonteCarloInt <- function(func,lim1,lim2){
g <- curve(func, lim1, lim2, n = 10000)
max_y = 10.0
min_y=0.0
rand_x <- runif(10000, 0, 1) * (lim2-lim1) + lim1
rand_y <- runif(10000, 0, 1) * (max_y-min_y) + min_y
plot(rand_x, rand_y)
delta <- h(rand_x) - rand_y
i = 0
below <- (NULL)
for(n in delta){i = i+1
if(n>0.0){below <- c(below,i)}}
plot(rand_x[below], rand_y[below])
interval_integral = (max_y-min_y) * (lim2 - lim1)
integral  = interval_integral * (length(below)/(1.0*length(rand_y)))
integral
}
MonteCarloInt(p,2.0,50.0)
MonteCarloInt <- function(func,lim1,lim2){
g <- curve(func, lim1, lim2, n = 10000)
max_y = 1.0
min_y=0.0
rand_x <- runif(10000, 0, 1) * (lim2-lim1) + lim1
rand_y <- runif(10000, 0, 1) * (max_y-min_y) + min_y
plot(rand_x, rand_y)
delta <- h(rand_x) - rand_y
i = 0
below <- (NULL)
for(n in delta){i = i+1
if(n>0.0){below <- c(below,i)}}
plot(rand_x[below], rand_y[below])
interval_integral = (max_y-min_y) * (lim2 - lim1)
integral  = interval_integral * (length(below)/(1.0*length(rand_y)))
integral
}
MonteCarloInt(p,2.0,50.0)
h <- function(x) (cos(50*x)+sin(20*x))^2
p <- function(x) (1/(pi*(1+x^2)))
MonteCarloInt <- function(func,lim1,lim2){
g <- curve(func, lim1, lim2, n = 10000)
max_y = 0.10
min_y=0.0
rand_x <- runif(10000, 0, 1) * (lim2-lim1) + lim1
rand_y <- runif(10000, 0, 1) * (max_y-min_y) + min_y
plot(rand_x, rand_y)
delta <- h(rand_x) - rand_y
i = 0
below <- (NULL)
for(n in delta){i = i+1
if(n>0.0){below <- c(below,i)}}
plot(rand_x[below], rand_y[below])
interval_integral = (max_y-min_y) * (lim2 - lim1)
integral  = interval_integral * (length(below)/(1.0*length(rand_y)))
h <- function(x) (cos(50*x)+sin(20*x))^2
p <- function(x) (1/(pi*(1+x^2)))
MonteCarloInt <- function(func,lim1,lim2){
g <- curve(func, lim1, lim2, n = 10000)
max_y = 0.10
min_y=0.0
rand_x <- runif(10000, 0, 1) * (lim2-lim1) + lim1
rand_y <- runif(10000, 0, 1) * (max_y-min_y) + min_y
plot(rand_x, rand_y)
delta <- h(rand_x) - rand_y
i = 0
below <- (NULL)
for(n in delta){i = i+1
if(n>0.0){below <- c(below,i)}}
plot(rand_x[below], rand_y[below])
interval_integral = (max_y-min_y) * (lim2 - lim1)
integral  = interval_integral * (length(below)/(1.0*length(rand_y)))
integral
}
MonteCarloInt(p,2.0,50.0)
MonteCarloInt(p,2.0,50.0)
h <- function(x) (cos(50*x)+sin(20*x))^2
p <- function(x) (1/(pi*(1+x^2)))
MonteCarloInt <- function(func,lim1,lim2){
g <- curve(func, lim1, lim2, n = 10000)
max_y = 0.10
min_y=0.0
rand_x <- runif(10000, 0, 1) * (lim2-lim1) + lim1
rand_y <- runif(10000, 0, 1) * (max_y-min_y) + min_y
plot(rand_x, rand_y)
delta <- h(rand_x) - rand_y
i = 0
below <- (NULL)
for(n in delta){i = i+1
if(n>0.0){below <- c(below,i)}}
plot(rand_x[below], rand_y[below])
interval_integral = (max_y-min_y) * (lim2 - lim1)
integral  = interval_integral * (length(below)/(1.0*length(rand_y)))
integral
}
h <- function(x) (cos(50*x)+sin(20*x))^2
p <- function(x) (1/(pi*(1+x^2)))
MonteCarloInt <- function(func,lim1,lim2){
g <- curve(func, lim1, lim2, n = 10000)
max_y = 0.10
min_y=0.0
rand_x <- runif(10000, 0, 1) * (lim2-lim1) + lim1
rand_y <- runif(10000, 0, 1) * (max_y-min_y) + min_y
plot(rand_x, rand_y)
delta <- h(rand_x) - rand_y
i = 0
below <- (NULL)
for(n in delta){i = i+1
if(n>0.0){below <- c(below,i)}}
plot(rand_x[below], rand_y[below])
interval_integral = (max_y-min_y) * (lim2 - lim1)
integral  = interval_integral * (length(below)/(1.0*length(rand_y)))
integral
}
h <- function(x) (cos(50*x)+sin(20*x))^2
p <- function(x) (1/(pi*(1+x^2)))
MonteCarloInt <- function(func,lim1,lim2){
g <- curve(func, lim1, lim2, n = 10000)
max_y = 0.10
min_y=0.0
rand_x <- runif(10000, 0, 1) * (lim2-lim1) + lim1
rand_y <- runif(10000, 0, 1) * (max_y-min_y) + min_y
plot(rand_x, rand_y)
delta <- h(rand_x) - rand_y
i = 0
below <- (NULL)
for(n in delta){i = i+1
if(n>0.0){below <- c(below,i)}}
plot(rand_x[below], rand_y[below])
interval_integral = (max_y-min_y) * (lim2 - lim1)
integral  = interval_integral * (length(below)/(1.0*length(rand_y)))
integral
}
MonteCarloInt <- function(func,lim1,lim2){
g <- curve(func, lim1, lim2, n = 10000)
max_y = 0.10
min_y=0.0
rand_x <- runif(10000, 0, 1) * (lim2-lim1) + lim1
rand_y <- runif(10000, 0, 1) * (max_y-min_y) + min_y
plot(rand_x, rand_y)
delta <- h(rand_x) - rand_y
i = 0
below <- (NULL)
for(n in delta){i = i+1
if(n>0.0){below <- c(below,i)}}
plot(rand_x[below], rand_y[below])
interval_integral = (max_y-min_y) * (lim2 - lim1)
integral  = interval_integral * (length(below)/(1.0*length(rand_y)))
integral
MonteCarloInt <- function(func,lim1,lim2){
g <- curve(func, lim1, lim2, n = 10000)
max_y = 0.10
min_y=0.0
rand_x <- runif(10000, 0, 1) * (lim2-lim1) + lim1
rand_y <- runif(10000, 0, 1) * (max_y-min_y) + min_y
plot(rand_x, rand_y)
delta <- h(rand_x) - rand_y
i = 0
below <- (NULL)
for(n in delta){i = i+1
if(n>0.0){below <- c(below,i)}}
plot(rand_x[below], rand_y[below])
interval_integral = (max_y-min_y) * (lim2 - lim1)
integral  = interval_integral * (length(below)/(1.0*length(rand_y)))
integral
}
h <- function(x) (cos(50*x)+sin(20*x))^2
p <- function(x) (1/(pi*(1+x^2)))
MonteCarloInt <- function(func,lim1,lim2){
g <- curve(func, lim1, lim2, n = 10000)
max_y = 0.10
min_y=0.0
rand_x <- runif(10000, 0, 1) * (lim2-lim1) + lim1
rand_y <- runif(10000, 0, 1) * (max_y-min_y) + min_y
plot(rand_x, rand_y)
delta <- h(rand_x) - rand_y
i = 0
below <- (NULL)
for(n in delta){i = i+1
if(n>0.0){below <- c(below,i)}}
plot(rand_x[below], rand_y[below])
interval_integral = (max_y-min_y) * (lim2 - lim1)
integral  = interval_integral * (length(below)/(1.0*length(rand_y)))
integral
}
MonteCarloInt(p,2.0,50.0)
seq(length=10000, from=0, to=1)
r <- seq(length=10000, from=0, to=1)
fun <- h(r)
max(fun)
min(fun)
MonteCarloInt <- function(func,lim1,lim2){
g <- curve(func, lim1, lim2, n = 10000)
max_y = 5.0
min_y=0.0
rand_x <- runif(10000, 0, 1) * (lim2-lim1) + lim1
rand_y <- runif(10000, 0, 1) * (max_y-min_y) + min_y
plot(rand_x, rand_y)
delta <- h(rand_x) - rand_y
i = 0
below <- (NULL)
for(n in delta){i = i+1
if(n>0.0){below <- c(below,i)}}
plot(rand_x[below], rand_y[below])
interval_integral = (max_y-min_y) * (lim2 - lim1)
integral  = interval_integral * (length(below)/(1.0*length(rand_y)))
integral
}
MonteCarloInt(h,0.0,1)
max(fun)
min(fun)
h <- function(x) (cos(50*x)+sin(20*x))^2
p <- function(x) (1/(pi*(1+x^2)))
MonteCarloInt <- function(func,lim1,lim2){
g <- curve(func, lim1, lim2, n = 10000)
r <- seq(length=10000, from=lim1, to=lim2)
f <- func(r)
max_y = max(f)
min_y= min(f)
rand_x <- runif(10000, 0, 1) * (lim2-lim1) + lim1
rand_y <- runif(10000, 0, 1) * (max_y-min_y) + min_y
plot(rand_x, rand_y)
delta <- h(rand_x) - rand_y
i = 0
below <- (NULL)
for(n in delta){i = i+1
if(n>0.0){below <- c(below,i)}}
plot(rand_x[below], rand_y[below])
interval_integral = (max_y-min_y) * (lim2 - lim1)
integral  = interval_integral * (length(below)/(1.0*length(rand_y)))
integral
}
MonteCarloInt(h,0.0,1)
MonteCarloInt(p,2.0,30)
MonteCarloInt(p,2.0,30.0)
pi
MonteCarloInt(p,2.0,3.0)
MonteCarloInt(p,2.0,30.0)
h <- function(x) (cos(50*x)+sin(20*x))^2
p <- function(x) (1/(pi*(1+x^2)))
MonteCarloInt <- function(func,lim1,lim2){
g <- curve(func, lim1, lim2, n = 10000)
r <- seq(length=10000, from=lim1, to=lim2)
f <- func(r)
max_y = max(f)
min_y= min(f)
rand_x <- runif(10000, 0, 1) * (lim2-lim1) + lim1
rand_y <- runif(10000, 0, 1) * (max_y-min_y) + min_y
plot(rand_x, rand_y)
delta <- func(rand_x) - rand_y
i = 0
below <- (NULL)
for(n in delta){i = i+1
if(n>0.0){below <- c(below,i)}}
plot(rand_x[below], rand_y[below])
interval_integral = (max_y-min_y) * (lim2 - lim1)
integral  = interval_integral * (length(below)/(1.0*length(rand_y)))
integral
}
MonteCarloInt(p,2.0,30.0)
MonteCarloInt <- function(func,lim1,lim2){
g <- curve(func, lim1, lim2, n = 10000)
r <- seq(length=10000, from=lim1, to=lim2)
f <- func(r)
max_y = max(f)
min_y= min(f)
rand_x <- runif(10000, 0, 1) * (lim2-lim1) + lim1
rand_y <- runif(10000, 0, 1) * (max_y-min_y) + min_y
plot(rand_x, rand_y)
delta <- func(rand_x) - rand_y
i = 0
below <- (NULL)
for(n in delta){i = i+1
if(n>0.0){below <- c(below,i)}}
plot(rand_x[below], rand_y[below])
interval_integral = (max_y-min_y) * (lim2 - lim1)
integral  = interval_integral * (length(below)/(1.0*length(rand_y)))
return integral
}
i = 0
below <- (NULL)
for(n in delta){i = i+1
if(n>0.0){below <- c(below,i)}}
g <- curve(func, lim1, lim2, n = 10000)
r <- seq(length=10000, from=lim1, to=lim2)
f <- func(r)
max_y = max(f)
min_y= min(f)
rand_x <- runif(10000, 0, 1) * (lim2-lim1) + lim1
rand_y <- runif(10000, 0, 1) * (max_y-min_y) + min_y
plot(rand_x, rand_y)
delta <- func(rand_x) - rand_y
i = 0
below <- (NULL)
for(n in delta){i = i+1
if(n>0.0){below <- c(below,i)}}
MonteCarloInt <- function(func,lim1,lim2){
g <- curve(func, lim1, lim2, n = 10000)
r <- seq(length=10000, from=lim1, to=lim2)
f <- func(r)
max_y = max(f)
min_y= min(f)
rand_x <- runif(10000, 0, 1) * (lim2-lim1) + lim1
rand_y <- runif(10000, 0, 1) * (max_y-min_y) + min_y
plot(rand_x, rand_y)
delta <- func(rand_x) - rand_y
i = 0
below <- (NULL)
for(n in delta){i = i+1
if(n>0.0){below <- c(below,i)}}
plot(rand_x[below], rand_y[below])
interval_integral = (max_y-min_y) * (lim2 - lim1)
integral  = interval_integral * (length(below)/(1.0*length(rand_y)))
integral
MonteCarloInt <- function(func,lim1,lim2){
g <- curve(func, lim1, lim2, n = 10000)
r <- seq(length=10000, from=lim1, to=lim2)
f <- func(r)
max_y = max(f)
min_y= min(f)
rand_x <- runif(10000, 0, 1) * (lim2-lim1) + lim1
rand_y <- runif(10000, 0, 1) * (max_y-min_y) + min_y
plot(rand_x, rand_y)
delta <- func(rand_x) - rand_y
i = 0
below <- (NULL)
for(n in delta){i = i+1
if(n>0.0){below <- c(below,i)}}
plot(rand_x[below], rand_y[below])
interval_integral = (max_y-min_y) * (lim2 - lim1)
integral  = interval_integral * (length(below)/(1.0*length(rand_y)))
integral
}
'Hola'
'Hola', x
'Hola' x
'Hola'+ x
h <- function(x) (cos(50*x)+sin(20*x))^2
p <- function(x) (1/(pi*(1+x^2)))
MonteCarloInt <- function(func,lim1,lim2){
g <- curve(func, lim1, lim2, n = 10000)
r <- seq(length=10000, from=lim1, to=lim2)
f <- func(r)
max_y = max(f)
min_y= min(f)
rand_x <- runif(10000, 0, 1) * (lim2-lim1) + lim1
rand_y <- runif(10000, 0, 1) * (max_y-min_y) + min_y
plot(rand_x, rand_y)
delta <- func(rand_x) - rand_y
i = 0
below <- (NULL)
for(n in delta){i = i+1
if(n>0.0){below <- c(below,i)}}
plot(rand_x[below], rand_y[below])
interval_integral = (max_y-min_y) * (lim2 - lim1)
integral  = interval_integral * (length(below)/(1.0*length(rand_y)))
'Hola' + integral
}
MonteCarloInt(p,2.0,30.0)
MonteCarloInt(p,2.0,30.0)
